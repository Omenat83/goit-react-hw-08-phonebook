{"version":3,"file":"static/js/288.52b8aed2.chunk.js","mappings":"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","sources":["pages/Contacts/ContactsPage.styled.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","Redux/Contacts/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px 0 20px 50px;\n`;\nexport const Title = styled.h1`\n  font-size: 40px;\n`;\n\nexport const TitleContact = styled.h2`\n  display: inline-block;\n  margin-top: 25px;\n  padding-left: 15px;\n  font-size: 36px;\n`;\n\nexport const Message = styled.h3`\n  display: flex;\n  justify-content: center;\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  max-width: 500px;\n  padding-left: 15px;\n  gap: 5px;\n  flex-direction: column;\n  margin-top: 25px;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 40%;\n  border: 1px solid lightgray;\n  padding: 7px 5px 3px 5px;\n  border-radius: 4px;\n  font-size: 16px;\n  outline: none;\n\n  &:focus-within {\n    border-color: rgba(43, 153, 126, 0.72);\n    box-shadow: 0px 0px 5px 2px rgba(43, 153, 126, 0.72);\n  }\n`;\n","import { setFilter } from 'Redux/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter);\n\n  // слідкуємо за інпутом фільтру\n  const filterChange = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div>\n      <FilterLabel>\n        <p>Find contacts by name</p>\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          onChange={filterChange}\n          value={filterValue}\n          title=\"Enter name of contact\"\n        />\n      </FilterLabel>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 7px 0;\n  font-size: 24px;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 10px;\n  cursor: pointer;\n  font-size: 16px;\n  letter-spacing: 0.05em;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n\n  &:hover {\n    background-color: rgba(43, 153, 126, 0.5);\n    border-color: rgba(43, 153, 126, 0.72);\n    box-shadow: 0px 0px 5px 2px rgba(43, 153, 126, 0.72);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ListItem, Button } from './ContactListItem.styled';\nimport { deleteContactsThunk } from 'Redux/Contacts/thunks';\n\n// відмальовка одного контакту зі списку\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem key={id}>\n      <p>\n        {name}: {number}\n      </p>\n      <Button type=\"button\" onClick={() => dispatch(deleteContactsThunk(id))}>\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 60%;\n  max-width: 500px;\n  padding: 10px 15px 10px 15px;\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getFilter = state => state.filter;\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { getFilteredContacts } from 'Redux/Contacts/selectors';\n\n// відмальовка списку контактів\nexport const ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n\n  return (\n    <List>\n      {contacts.map(contact => {\n        return (\n          <ContactListItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n          />\n        );\n      })}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 25px;\n  width: 60%;\n  max-width: 500px;\n  padding: 10px 15px 15px 15px;\n  border: 1.5px solid black;\n  border-radius: 4px;\n`;\n\nexport const FormItem = styled.div`\n  display: flex;\n  gap: 3px;\n  flex-direction: column;\n\n  &:not(:first-child) {\n    margin-top: 20px;\n  }\n`;\n\nexport const FormLabel = styled.label`\n  font-size: 26px;\n`;\n\nexport const FormInput = styled.input`\n  width: 40%;\n  border: 1px solid lightgray;\n  padding: 7px 5px 3px 5px;\n  border-radius: 4px;\n  font-size: 16px;\n  outline: none;\n\n  &:focus-within {\n    border-color: rgba(43, 153, 126, 0.72);\n    box-shadow: 0px 0px 5px 2px rgba(43, 153, 126, 0.72);\n  }\n`;\n\nexport const FormButton = styled.button`\n  margin-top: 25px;\n  padding: 4px 10px;\n  cursor: pointer;\n  font-size: 16px;\n  letter-spacing: 0.05em;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n\n  &:hover {\n    background-color: rgba(43, 153, 126, 0.5);\n    border-color: rgba(43, 153, 126, 0.72);\n    box-shadow: 0px 0px 5px 2px rgba(43, 153, 126, 0.72);\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContactsThunk } from 'Redux/Contacts/thunks';\nimport { getAllContacts } from '../../Redux/Contacts/selectors';\nimport {\n  Form,\n  FormItem,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\nimport { toast } from 'react-hot-toast';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getAllContacts);\n\n  // слідкування за input\n  const inputChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  // обробка кліку по Add Contact\n  const onSubmit = e => {\n    e.preventDefault();\n    const newName = name.toLocaleLowerCase();\n\n    if (\n      contacts.some(contact => {\n        return contact.name.toLowerCase() === newName;\n      })\n    ) {\n      toast.error(`${newName} is already in contacts`);\n    } else {\n      const newContact = {\n        name: name,\n        number: number,\n      };\n      dispatch(addContactsThunk(newContact));\n\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormItem>\n        <FormLabel htmlFor=\"inputName\">Name</FormLabel>\n        <FormInput\n          id=\"inputName\"\n          type=\"text\"\n          name=\"name\"\n          onChange={inputChange}\n          value={name}\n          pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormItem>\n      <FormItem>\n        <FormLabel htmlFor=\"inputPhone\">Phone number</FormLabel>\n        <FormInput\n          id=\"inputPhone\"\n          type=\"tel\"\n          name=\"number\"\n          onChange={inputChange}\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormItem>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n}\n","import { getContactsThunk } from 'Redux/Contacts/thunks';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Message, Title, TitleContact } from './ContactsPage.styled';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  const { items, isLoading, error } = useSelector(state => state.contacts);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <TitleContact>Contacts</TitleContact>\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <Message>{error}</Message>}\n      {items.length > 0 ? (\n        <ContactList />\n      ) : (\n        <Message>Sorry, no contacts yet...</Message>\n      )}\n    </Container>\n  );\n}\n"],"names":["Container","styled","Title","TitleContact","Message","FilterLabel","FilterInput","Filter","dispatch","useDispatch","filterValue","useSelector","state","filter","type","name","onChange","value","target","setFilter","title","ListItem","Button","ContactListItem","id","number","onClick","deleteContactsThunk","List","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getAllContacts","contacts","items","getFilteredContacts","contact","toLowerCase","includes","ContactList","Form","FormItem","FormLabel","FormInput","FormButton","ContactForm","useState","setName","setNumber","inputChange","onSubmit","e","preventDefault","newName","toLocaleLowerCase","some","toast","newContact","addContactsThunk","htmlFor","pattern","required","ContactsPage","isLoading","error","useEffect","getContactsThunk","Loader"],"sourceRoot":""}